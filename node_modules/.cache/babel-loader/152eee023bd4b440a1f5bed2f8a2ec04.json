{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/melvinalfaro/monsters-rolodex/src/App.js\";\nimport React, { Component } from 'react'; // importo component con el fin de utilizar clases\n\nimport logo from \"./logo.svg\";\nimport './App.css'; // Component, me da acceso a usar el método render()\n// dentro de las clases puedo usar state, el cual es un obejto de js con propiedades, que se puede accesar desde cualquier punto dentro de la clase\n// Component, también da acceso acceso al método setState, el cual permite cambiar los valores de las propiedades del state\n\nclass App extends Component {\n  constructor() {\n    // los constructores en react solo se utilizan para dos propósitos, 1. para inicializar un estado local asignando un objeto al this.state. 2. Para enlazar manejadores de eventos a una instancia\n    super(); // super, llama el método constructor, de Component que es su padre, lo cual da acceso a this.state\n\n    this.state = {\n      //this.state asigna el estado inicial, setState lo modifica luego, ya fuera del constructor.\n      //dentro de este state, se crean las propiedades que se usarán a lo largo y dentro de la clase\n      monsters: [{\n        name: 'Frankenstein'\n      }, {\n        name: 'Dracula'\n      }, {\n        name: 'Zombie'\n      }]\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: // los brackets son necesarios, dentro de estos, se puede remderizar lo que sea en js\n      this.state.monsters.map(monster => /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\" \", monster.name, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 46\n      }, this)) //map, retorna el retorno de cualquier función que se le pase, iterado sobre cada elemento en un array\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this); // return cierra con ;\n  }\n\n}\n\nexport default App; // setState\n// En react, la unica forma en que se puede actualizar el estado del componente, es por medio del uso de setState. \n// no es posible, como en JS normal, asignar un valor a una variable, por ejemplo, esto porque la forma en que funciona\n// react, donde la data fluye en un solo sentido, no permite este tipo de acciones.\n// setState  y render\n// de la forma en que funciona react, el componente se renderiza (render()), cada vez que se actualiza el estado\n// es decir, cuando una acción, ejecuta un setState, y se actualiza el estado, se vuelve a ejecutar render()\n// JSX\n// Hay que tener en cuenta, que en react, nunca se está escribiendo HTML por más que se le asemeje, siempre\n// se está escribiendo código JSX, como \"className\", \"onClick\", \"src\"","map":{"version":3,"sources":["/Users/melvinalfaro/monsters-rolodex/src/App.js"],"names":["React","Component","App","constructor","state","monsters","name","render","map","monster"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAAyC;;;AAEzC,OAAO,WAAP,C,CAGA;AACA;AACA;;AACA,MAAMC,GAAN,SAAkBD,SAAlB,CAA4B;AAC1BE,EAAAA,WAAW,GAAG;AAAE;AACd,YADY,CACH;;AAET,SAAKC,KAAL,GAAa;AAAE;AACb;AACAC,MAAAA,QAAQ,EAAE,CACR;AACEC,QAAAA,IAAI,EAAE;AADR,OADQ,EAIR;AACEA,QAAAA,IAAI,EAAE;AADR,OAJQ,EAOR;AACEA,QAAAA,IAAI,EAAE;AADR,OAPQ;AAFC,KAAb;AAeD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,gBACI;AACA,WAAKH,KAAL,CAAWC,QAAX,CAAoBG,GAApB,CAAwBC,OAAO,iBAAI;AAAA,wBAAOA,OAAO,CAACH,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA,cAAnC,CAFJ,CAEoE;;AAFpE;AAAA;AAAA;AAAA;AAAA,YADF,CADO,CAOJ;AACJ;;AA7ByB;;AAgC5B,eAAeJ,GAAf,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["import React, { Component } from 'react' // importo component con el fin de utilizar clases\nimport logo from './logo.svg';\nimport './App.css';\n\n\n// Component, me da acceso a usar el método render()\n// dentro de las clases puedo usar state, el cual es un obejto de js con propiedades, que se puede accesar desde cualquier punto dentro de la clase\n// Component, también da acceso acceso al método setState, el cual permite cambiar los valores de las propiedades del state\nclass App extends Component {\n  constructor() { // los constructores en react solo se utilizan para dos propósitos, 1. para inicializar un estado local asignando un objeto al this.state. 2. Para enlazar manejadores de eventos a una instancia\n    super(); // super, llama el método constructor, de Component que es su padre, lo cual da acceso a this.state\n\n    this.state = { //this.state asigna el estado inicial, setState lo modifica luego, ya fuera del constructor.\n      //dentro de este state, se crean las propiedades que se usarán a lo largo y dentro de la clase\n      monsters: [\n        {\n          name: 'Frankenstein'\n        },\n        {\n          name: 'Dracula'\n        },\n        {\n          name: 'Zombie'\n        },\n      ]\n    }\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        { // los brackets son necesarios, dentro de estos, se puede remderizar lo que sea en js\n          this.state.monsters.map(monster => <h1> { monster.name } </h1>) //map, retorna el retorno de cualquier función que se le pase, iterado sobre cada elemento en un array\n        }\n      </div>\n    ); // return cierra con ;\n  }\n}\n\nexport default App;\n\n// setState\n// En react, la unica forma en que se puede actualizar el estado del componente, es por medio del uso de setState. \n// no es posible, como en JS normal, asignar un valor a una variable, por ejemplo, esto porque la forma en que funciona\n// react, donde la data fluye en un solo sentido, no permite este tipo de acciones.\n\n// setState  y render\n// de la forma en que funciona react, el componente se renderiza (render()), cada vez que se actualiza el estado\n// es decir, cuando una acción, ejecuta un setState, y se actualiza el estado, se vuelve a ejecutar render()\n\n// JSX\n// Hay que tener en cuenta, que en react, nunca se está escribiendo HTML por más que se le asemeje, siempre\n// se está escribiendo código JSX, como \"className\", \"onClick\", \"src\""]},"metadata":{},"sourceType":"module"}